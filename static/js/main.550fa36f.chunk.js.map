{"version":3,"sources":["InfoBox.js","ChangeView.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","ChangeView","center","zoom","useMap","setView","casesTypeColors","hex","multiplier","recovered","deaths","showDataOnMap","data","casesType","map","country","Circle","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","prettyPrintStat","stat","Map","countries","TileLayer","url","attribution","Table","options","plugins","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","useEffect","fetch","then","res","json","chartData","lastDataPoint","date","newDataPoint","x","y","push","buildChartData","length","datasets","backgroundColor","borderColor","fill","App","setCountries","selectedCountry","setSelectedCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","newlist","name","iso2","sortedData","sort","a","b","sortData","catch","err","FormControl","Select","variant","onChange","e","currCountry","target","console","log","MenuItem","id","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.550fa36f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport './InfoBox.css'\r\nfunction InfoBox({ title, cases,active,isRed, total, ...props }) {\r\n  return (\r\n    <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && 'infoBox__cases--green'}`}>{cases}</h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react'\r\nimport {useMap} from 'react-leaflet'\r\n\r\nfunction ChangeView({ center, zoom }) {\r\n  const map = useMap();\r\n  map.setView(center, zoom);\r\n  return null;\r\n}\r\n\r\nexport default ChangeView","import { Circle, Popup } from \"react-leaflet\";\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 180,\r\n  },\r\n  recovered: {\r\n    hex: \"#7DD71D\",\r\n    multiplier: 220,\r\n  },\r\n  deaths: {\r\n    hex: \"#FB4443\",\r\n    multiplier: 300,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n  return sortedData;\r\n};\r\n\r\n// to draw circles on the map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      pathOptions={{\r\n        color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex,\r\n      }}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\nexport const prettyPrintStat = (stat) => {\r\n  return stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n};\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport ChangeView from \"./ChangeView\";\r\nimport { showDataOnMap } from \"./util\";\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\n\r\nfunction Map({ countries,casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <ChangeView center={center} zoom={zoom} />\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nconst options = {\r\n  plugins: {\r\n    legend: {\r\n      display: false,\r\n    },\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data[casesType]) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\" }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        const chartData = buildChartData(res,casesType);\r\n        setData(chartData);\r\n      });\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: data,\r\n                backgroundColor: casesType === \"recovered\" ? \"lightgreen\": \"rgba(204,16,52,0.5)\",\r\n                borderColor: casesType === \"recovered\" ? \"green\": \"#CC1034\",\r\n                fill: true,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import \"./App.css\";\nimport {\n  Card,\n  CardContent,\n  MenuItem,\n  FormControl,\n  Select,\n} from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport { prettyPrintStat } from \"./util\";\nconst initial = { lat: 74.80746, lng: -40.4796 };\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 14.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(2);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((res) => res.json())\n      .then((res) => setCountryInfo(res));\n  }, []);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((res) => res.json())\n      .then((res) => {\n        const newlist = res.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2,\n        }));\n\n        const sortedData = sortData(res);\n        setTableData(sortedData);\n        setMapCountries(res);\n        setCountries(newlist);\n      })\n      .catch((err) => {\n        setCountries([]);\n      });\n  }, []);\n\n  const onChangeHandler = (e) => {\n    const currCountry = e.target.value;\n\n    const url =\n      currCountry === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${currCountry}`;\n    fetch(url)\n      .then((res) => res.json())\n      .then((res) => {\n        setSelectedCountry(currCountry);\n        setCountryInfo(res);\n        console.log(res.countryInfo);\n        setMapCenter({ lat: res.countryInfo.lat, lng: res.countryInfo.long });\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={selectedCountry}\n              onChange={onChangeHandler}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country, id) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n\n              {/* <MenuItem value=\"worldwide\">worldwide</MenuItem>\n            <MenuItem value=\"worldwide\">Asia</MenuItem>\n            <MenuItem value=\"worldwide\">USA</MenuItem>\n            <MenuItem value=\"worldwide\">UK</MenuItem> */}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed={true}\n            active={casesType === 'cases'}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Today cases\"\n            total={prettyPrintStat(countryInfo.cases)}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n          />\n          <InfoBox\n            active={casesType === 'recovered'}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Today recovered\"\n            total={prettyPrintStat(countryInfo.recovered)}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n          />\n          <InfoBox\n            isRed={true}\n            active={casesType === 'deaths'}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Today deaths\"\n            total={prettyPrintStat(countryInfo.deaths)}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n          />\n        </div>\n\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Total Cases by Country</h3>\n          <Table countries={tableData} />\n          <br />\n          <h3>Worldwide new {casesType} - Prev 120 days</h3>\n          <LineGraph casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}